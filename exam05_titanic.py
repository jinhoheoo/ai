# -*- coding: utf-8 -*-
"""exam05_titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdngjM-b5aX_K8Okso2He49gKb5lCfsl

실제 타이타닉 데이터 활용해서 살았다 죽었다 판단하는 모델

pandas 정리
"""

import seaborn as sns
import pandas as pd
import numpy as np

raw_data = sns.load_dataset('titanic')
raw_data

raw_data.info()

#object,category 이런걸 int나 float처럼 곱할 수 있는걸로 처리해야함
raw_data.isnull().sum() #null값들을 찾아 더해서 몇개인지 표시함

#age의 경우 결과에 영향을 미치는 데이터이기 때문에 버리기 아까움
#그래서 null값이 아닌 age 값들의 평균들을 null 값에 넣어서 평균에 영향을 안주게 해서 데이터 활용
clean_data = raw_data.dropna(axis=1, thresh=500) #이걸로 deck 삭제시킴
#열을 지울때 axis=1을 주고 0을주면 하나하나 제거할때 thresh=500은 500개 이상이면 제거한다는 의미임

clean_data.columns

mean_age = clean_data['age'].mean()
print(mean_age)

clean_data['age'].fillna(mean_age, inplace = True) #age 데이터 안의 nan 값에 mean_age 값을 넣어주는거임
#inplace=True를 하면  데이터를 직접 수정하고 반환값을 생성하지 않는 pandas의 메소드에 사용되는 매개변수입니다.
#이 매개변수를 사용하면 호출된 메소드가 데이터를 직접 수정하게 됩니다.
#그렇지 않으면 새로운 객체를 반환하고, 이를 변수에 다시 할당해야 원본 데이터가 수정됩니다.
#clean_data = clean_data['age'].fillna(mean_age) 이렇게 해도 됨.
clean_data.head(10)

#embarked 하고 embark_town이 중복이고 survived와 alive가 중복이고 pclass와 class가 중복이니 후자들을 삭제하려함
clean_data.drop(['embark_town','alive','pclass'], axis=1, inplace =True)

clean_data.info()

clean_data['embarked'][825:830]

clean_data['embarked'].fillna(method='ffill', inplace=True)  #앞에값으로 nan값 채우려면 ffill쓰면됨, 뒤에 값으로 채울꺼면 bfill, 특정값도 가능함
clean_data['embarked'][825:830]

clean_data.isnull().sum()

clean_data.info()

clean_data['sex'].replace({'male':0,'female':1}, inplace=True)
clean_data.head(10)

print(clean_data['sex'].unique())  #unique를 쓰면 값들이 어떤게 있는지 알려줌 1개씩

print(clean_data['embarked'].unique())

from sklearn import preprocessing

label_encoder = preprocessing.LabelEncoder() #유니크한 값들에 숫자로 라벨을 붙여주는거임
onehot_encoder = preprocessing.OneHotEncoder() #One-Hot 인코딩은 각 범주를 이진(0 또는 1)의 열로 변환하는 방법입니다.
#각 범주에 대해 새로운 이진 열을 생성하고, 해당 범주에 속하는 경우 해당 열의 값을 1로, 속하지 않는 경우 0으로 표시합니다.

print(clean_data['embarked'].value_counts())  #value_counts는 s가 몇개고 c가 몇개고 나타내줌

clean_data['embarked'] = label_encoder.fit_transform(clean_data['embarked']) #s가 2로 c가 0으로 이렇게 숫자로 라벨을 붙여줌
print(clean_data['embarked'].unique())

print(clean_data['embarked'].value_counts())

clean_data['adult_male'] = clean_data['adult_male'].astype('int64')  #ault_male의 타입이 bool인걸 int64로 바꿈
clean_data.info()

clean_data.head()

target = clean_data[['survived']]
target

training_data = clean_data.drop('survived', axis = 1, inplace = False)
training_data

value_data = training_data[['age', 'fare']]
value_data

##age,fare 스케일링하려함
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_data = scaler.fit_transform(value_data)
value_data = pd.DataFrame(scaled_data, columns=value_data.columns)
value_data.head()

training_data.drop(['age','fare'], axis=1, inplace=True)
training_data.head()

onehot_data = pd.get_dummies(training_data['pclass']) #get_dummies 얘한테 열을 주면 열을 늘려줌
#위에보면 pclass의 열안에 들어있는 값이 1,2,3 이거를 각각의 열로 만들어줌
onehot_data.head() #onehot코드는 열이 가지는값이 0또는 1 이 되게함 즉 true,false로 표현하는거임.

onehot_data = pd.get_dummies(training_data, columns=training_data.columns) #열에 속한 값들을 모두 표현해줌
onehot_data.head()

onehot_data.info()

training_data = pd.concat([value_data, onehot_data], axis=1)
training_data.info()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(training_data.astype('float64'), target, test_size=0.20)

print(x_train.shape, y_train.shape)
print(x_test.shape, y_test.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

model.compile(loss='mse', optimizer='adam', metrics=['binary_accuracy'])

fit_hist = model.fit(x_train, y_train, batch_size=50, epochs=5, validation_split=0.2, verbose=1)

import matplotlib.pyplot as plt
plt.plot(fit_hist.history['binary_accuracy'])
plt.plot(fit_hist.history['val_binary_accuracy'])
plt.show()

score = model.evaluate(x_test,y_test,verbose=0)
print('loss', score[0])
print('accuracy', score[1])